### Get the token for the admin user
POST {{protocol}}{{host}}:{{port}}/api/auth
Content-Type: application/json
Accept: application/json

{
  "email": "admin@test.nl",
  "password": "test"
}

> {%
    client.global.set("token", response.body.token);
%}

### Get all users with admin authorization - Good Weather
GET {{protocol}}{{host}}:{{port}}/api/users?role=admin
Authorization: Bearer {{token}}

> {%
    client.test("Status code is 200 and users are received", function() {
        client.assert(response.status === 200, "Expected status code 200");
    });
%}

### Get a specific user by ID with user authorization - Good Weather
GET {{protocol}}{{host}}:{{port}}/api/users/1
Authorization: Bearer {{token}}

> {%
    client.test("Status code is 200 and user is received", function() {
        client.assert(response.status === 200, "Expected status code 200");
    });
%}

### Create a new user - Good Weather
POST {{protocol}}{{host}}:{{port}}/api/users
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "firstname": "TestMan",
  "prefix": "Uit",
  "lastname": "Test",
  "address": "Teststraat",
  "housenumber": "1",
  "city": "Teststad",
  "province": "Testprovincie",
  "postal": "1234AB",
  "email": "tester@test.nl",
  "password": "appel",
  "id": 1,
  "role": "admin"
}

> {%
    client.test("Status code is 201 and user is created", function() {
        client.assert(response.status === 201, "Expected status code 201");
    });
%}

### Update an existing user with admin authorization - Good Weather
PUT {{protocol}}{{host}}:{{port}}/api/users/1
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "firstname": "TestMannetje",
  "prefix": "Uit",
  "lastname": "Test",
  "address": "Teststraat",
  "housenumber": "1",
  "city": "Teststad",
  "province": "Testprovincie",
  "postal": "1234AB",
  "email": "tester@test.nl",
  "password": "appel",
  "id": 1,
  "role": "admin"
}


> {%
    client.test("Status code is 200 and user is updated", function() {
        client.assert(response.status === 200, "Expected status code 200");
    });
%}

### Delete an existing user with admin authorization - Good Weather
DELETE {{protocol}}{{host}}:{{port}}/api/users/0
Authorization: Bearer {{token}}

> {%
    client.test("Status code is 200 and user is deleted", function() {
        client.assert(response.status === 200, "Expected status code 200");
    });
%}

### Get users with an invalid role parameter - Bad Weather
GET {{protocol}}{{host}}:{{port}}/api/users?role=invalid_role
Authorization: Bearer {{token}}

> {%
    client.test("Status code is 400 for invalid role parameter", function() {
        client.assert(response.status === 400, "Expected status code 400 for invalid role parameter");
    });
%}

### Get a non-existent user by ID - Bad Weather
GET {{protocol}}{{host}}:{{port}}/api/users/99999
Authorization: Bearer {{token}}

> {%
    client.test("Status code is 404 for non-existent user", function() {
        client.assert(response.status === 404, "Expected status code 404 for non-existent user");
    });
%}

### Create a new user with incomplete data - Bad Weather
POST {{protocol}}{{host}}:{{port}}/api/users
Content-Type: application/json
Authorization: Bearer {{token}}

{
}

> {%
    client.test("Status code is 400 for incomplete user creation", function() {
        client.assert(response.status === 400, "Expected status code 400 for incomplete user creation");
    });
%}

### Update a user without admin authorization - Bad Weather
PUT {{protocol}}{{host}}:{{port}}/api/users/12345
Content-Type: application/json

{
  "username": "updateduser"
}

> {%
    client.test("Status code is 401 for unauthorized user update", function() {
        client.assert(response.status === 401, "Expected status code 401 for unauthorized user update");
    });
%}

### Delete a user without admin authorization - Bad Weather
DELETE {{protocol}}{{host}}:{{port}}/api/users/12345

> {%
    client.test("Status code is 401 for unauthorized user deletion", function() {
        client.assert(response.status === 401, "Expected status code 401 for unauthorized user deletion");
    });
%}
